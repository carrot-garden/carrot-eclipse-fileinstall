#
# eclipse/fileinstall plug-in configuration file.
#
# Note: "@{...}" variables are substituted by the plug-in.
# @{eclipse-workspace} - absolute path of eclipse workspace
# @{eclipse-project-name} - eclipse project name for auto-deploy
# @{eclipse-project-path} - absolute path of eclipse project folder
#
{

	# eclipse configuration
	eclipse {

		# list of monitored dependency projects
		list = [
			aaa
			bbb
			sss
		]
	
		# conditions to activate fileinstall for eclipse-project
		check = {

			# verify project is compiled w/o errors
			is-worker-build-success = true
				
			# verify META-INF/MANIFEST.MF is present in target/classes
			is-worker-manifest-present = true
			
			# verify target project launch config is running
			is-master-launch-running = true
			
			# verify target deploy folder is present 
			is-master-deploy-present = true
			
		}

	}

	# fileinstall configuration
	fileinstall {

		# configuration deploy folder
		folder = "target/@etc"

		# configuration file name pattern
		file = "org.apache.felix.fileinstall-@{eclipse-project-name}.cfg"

		# prototype configuration
		template = {
		
			# monitor eclipse project dir 
			felix.fileinstall.dir="@{eclipse-project-path}/target"
			
			# make jardir bundles only from target/classes
			felix.fileinstall.filter="classes"
			
			# location of auto-assembled bundle jar; will be called "classes.jar"
			felix.fileinstall.tmpdir="${karaf.data}/tmp/@{eclipse-project-name}"
			
			# how frequently to check for changes in target/classes, millis 
			felix.fileinstall.poll=1000
			
			# do not remember jardir bundles on next karaf start
			felix.fileinstall.bundles.startTransient=true
			
			# do not persist config admin changes, if any
			felix.fileinstall.enableConfigSave=false
			
			# activate file-install scan close to the startup end
			felix.fileinstall.active.level=99
			
			# activate module jardir bundle at the last start level
			felix.fileinstall.start.level=100
	
		}

	}
	
}
